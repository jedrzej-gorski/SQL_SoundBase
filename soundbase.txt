
CREATE TABLE SOUNDBASE_USERS (
    USER_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    USERNAME VARCHAR2(20) NOT NULL UNIQUE,
    SIGN_UP_DATE DATE NOT NULL,
    PASSWORD VARCHAR2(20) NOT NULL,
    USER_TYPE NUMBER(1) CONSTRAINT USER_TYPE_CHK CHECK (USER_TYPE IN (0, 1)),
    CONSTRAINT USER_PK PRIMARY KEY(USER_ID) 
);
 
CREATE TABLE RELEASE_TYPE (
    TYPE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    TYPE_NAME VARCHAR2(25) NOT NULL UNIQUE,
    TYPE_DESCRIPTION VARCHAR2(4000),
    CONSTRAINT RELEASE_TYPE_PK PRIMARY KEY(TYPE_ID)
)
INSERT INTO RELEASE_TYPE(TYPE_NAME,TYPE_DESCRIPTION) VALUES ('Single','ass');
commit
 select * from RELEASE_TYPE;
 
 INSERT INTO RELEASE_TYPE(TYPE_NAME,TYPE_DESCRIPTION) VALUES ('Album','ass');
commit

 
CREATE TABLE DESCRIPTIVE_TAG (
    TAG_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    TAG_NAME VARCHAR2(25) NOT NULL UNIQUE,
    TAT_DESCRIPTION VARCHAR2(4000),
    CONSTRAINT DESCRIPTIVE_TAG_PK PRIMARY KEY(TAG_ID)
)
 
CREATE TABLE RELEASE_LIST (
    LIST_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    AUTHOR_ID INTEGER NOT NULL,
    CREATION_DATE DATE NOT NULL,
    CONSTRAINT RELEASE_LIST_PK PRIMARY KEY(LIST_ID),
    CONSTRAINT RELEASE_LIST_FK FOREIGN KEY(AUTHOR_ID)
    REFERENCES SOUNDBASE_USERS(USER_ID)
)
 
CREATE TABLE TAG_OF_LIST (
    LIST_ID INTEGER NOT NULL,
    TAG_ID INTEGER NOT NULL,
    CONSTRAINT TAG_OF_LIST_PK PRIMARY KEY(LIST_ID, TAG_ID),
    CONSTRAINT TAG_OF_LIST_FK_LIST FOREIGN KEY(LIST_ID)
    REFERENCES RELEASE_LIST(LIST_ID),
    CONSTRAINT TAG_OF_LIST_FK_TAG FOREIGN KEY(TAG_ID)
    REFERENCES DESCRIPTIVE_TAG(TAG_ID)
)
 
CREATE TABLE TRACK (
    TRACK_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    TRACK_NAME VARCHAR(35) NOT NULL,
    TRACK_LENGTH INTERVAL DAY TO SECOND(0),
    CONSTRAINT TRACK_ID_PK PRIMARY KEY(TRACK_ID)
)
 
CREATE TABLE ARTIST (
    ARTIST_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    ARTIST_NAME VARCHAR2(35) NOT NULL,
    ACTIVITY_START_DATE DATE,
    ARTIST_DESCRIPTION VARCHAR2(4000),
    CONSTRAINT ARTIST_PK PRIMARY KEY(ARTIST_ID)
)
 
CREATE TABLE MEMBER_OF (
    ARTIST_ID1 INTEGER NOT NULL,
    ARTIST_ID2 INTEGER NOT NULL,
    CONSTRAINT MEMBER_OF_PK PRIMARY KEY(ARTIST_ID1, ARTIST_ID2),
    CONSTRAINT ID_FK1 FOREIGN KEY(ARTIST_ID1)
    REFERENCES ARTIST(ARTIST_ID),
    CONSTRAINT ID_FK2 FOREIGN KEY(ARTIST_ID2)
    REFERENCES ARTIST(ARTIST_ID)
 
)
 
CREATE TABLE GENRE (
    GENRE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    GENRE_NAME VARCHAR2(25) NOT NULL UNIQUE,
    GENRE_DESCRIPTION VARCHAR2(4000),
    CONSTRAINT GENRE_PK PRIMARY KEY(GENRE_ID)
)

 
CREATE TABLE MUSIC_RELEASE (
    RELEASE_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    RELEASE_NAME VARCHAR(50) NOT NULL UNIQUE,
    RELEASE_DATE DATE,
    RELEASE_TYPE_ID INTEGER NOT NULL,
    CONSTRAINT RELEASE_PK PRIMARY KEY(RELEASE_ID),
    CONSTRAINT TYPE_FK FOREIGN KEY(RELEASE_TYPE_ID)
    REFERENCES RELEASE_TYPE(TYPE_ID)
)
 
CREATE TABLE GENRE_OF_RELEASE (
    GENRE_ID INTEGER NOT NULL,
    RELEASE_ID INTEGER NOT NULL,
    CONSTRAINT GENRE_OF_RELEASE_PK PRIMARY KEY(GENRE_ID, RELEASE_ID),
    CONSTRAINT RELEASE_FK_GENRE FOREIGN KEY (RELEASE_ID)
    REFERENCES MUSIC_RELEASE(RELEASE_ID),
    CONSTRAINT GENRE_FK FOREIGN KEY (GENRE_ID)
    REFERENCES GENRE(GENRE_ID)
)
 
CREATE TABLE ARTIST_OF_RELEASE (
    ARTIST_ID INTEGER NOT NULL,
    RELEASE_ID INTEGER NOT NULL,
    CONSTRAINT ARTIST_OF_RELEASE_PK PRIMARY KEY(ARTIST_ID, RELEASE_ID),
    CONSTRAINT RELEASE_FK_ARTIST FOREIGN KEY (RELEASE_ID)
    REFERENCES MUSIC_RELEASE(RELEASE_ID),
    CONSTRAINT ARTIST_FK_ARTIST FOREIGN KEY (ARTIST_ID)
    REFERENCES ARTIST(ARTIST_ID)
)
 
CREATE TABLE TRACKS_IN_RELEASE (
    RELEASE_ID INTEGER NOT NULL,
    TRACK_ID INTEGER NOT NULL,
    TRACK_NO INTEGER CONSTRAINT POSITIVE_NO_CHECK CHECK (TRACK_NO >= 1),
    CONSTRAINT TRACKS_IN_RELEASE_PK PRIMARY KEY(RELEASE_ID, TRACK_ID),
    CONSTRAINT RELEASE_FK_TRACKS FOREIGN KEY (RELEASE_ID)
    REFERENCES MUSIC_RELEASE(RELEASE_ID),
    CONSTRAINT TRACK_FK_TRACK FOREIGN KEY (TRACK_ID)
    REFERENCES TRACK(TRACK_ID)
)
 
CREATE TABLE RATING (
    RATING_ID INTEGER GENERATED BY DEFAULT AS IDENTITY,
    STAR_VALUE INTEGER CONSTRAINT STAR_LIMIT CHECK (STAR_VALUE BETWEEN 1 AND 5) NOT NULL,
    RATING_DATE DATE NOT NULL,
    SOUNDBASE_USERS_ID INTEGER NOT NULL,
    RATED_RELEASE_ID INTEGER NOT NULL,
    CONTENTS VARCHAR2(4000),
    CONSTRAINT RATING_ID PRIMARY KEY(RATING_ID),
    CONSTRAINT RATING_FK FOREIGN KEY(SOUNDBASE_USER_ID)
    REFERENCES SOUNDBASE_USERS(USER_ID) 
)
 
CREATE TABLE RELEASE_IN_LIST (
    RELEASE_ID INTEGER NOT NULL,
    LIST_ID INTEGER NOT NULL,
    RELEASE_NO INTEGER CONSTRAINT POSITIVE_NO_CHECK_2 CHECK (RELEASE_NO >= 1),
    CONSTRAINT RELEASE_IN_LIST_PK PRIMARY KEY(RELEASE_ID, LIST_ID),
    CONSTRAINT RELEASE_IN_LIST_FK_RELEASE FOREIGN KEY(RELEASE_ID)
    REFERENCES MUSIC_RELEASE(RELEASE_ID),
    CONSTRAINT RELEASE_IN_LIST_FK_LIST FOREIGN KEY(LIST_ID)
    REFERENCES RELEASE_LIST(LIST_ID)
)
 
CREATE TABLE TAG_OF_RELEASE (
    TAG_ID INTEGER NOT NULL,
    RELEASE_ID INTEGER NOT NULL,
    CONSTRAINT TAG_OF_RELEASE_PK PRIMARY KEY(TAG_ID, RELEASE_ID),
    CONSTRAINT TAG_OF_RELEASE_FK_TAG FOREIGN KEY(TAG_ID)
    REFERENCES DESCRIPTIVE_TAG(TAG_ID),
    CONSTRAINT TAG_OF_RELEASE_FK_RELEASE FOREIGN KEY(RELEASE_ID)
    REFERENCES MUSIC_RELEASE(RELEASE_ID)
)
 
CREATE INDEX IDX_ARTIST_NAME ON ARTIST(ARTIST_NAME);

------------------------------USER ROLE DEFINITIONS---------------------------------------------------------------
create user normaluser identified by normalpass;
create user adminuser identified by adminpass;

create user entryuser identified by entrypass;

------------------------------USER PERMISSION DEFINIITION---------------------------------------------------------
#I HAVE NO IDEA IF THIS EVEN WORKS OR NOT
grant create session to normaluser;
grant create session to adminuser;
grant create session to entryuser;
create public synonym soundbase_users for soundbase_users;
create public synonym release_list for release_list;
create public synonym release_type for release_type;
create public synonym descriptive_tag for descriptive_tag;
create public synonym tag_of_list for tag_of_list;
create public synonym member_of for member_of;
create public synonym genre for genre;
create public synonym music_release for music_release;
create public synonym artist_of_release for artist_of_release;
create public synonym genre_of_release for genre_of_release;
create public synonym release_in_list for release_in_list;
create public synonym tracks_in_release for tracks_in_release;
create public synonym rating for rating;
create public synonym tag_of_release for tag_of_release
create public synonym track for track;
create public synonym artist for artist;
grant select on soundbase_users to entryuser, normaluser, adminuser;
grant select on release_list to entryuser, normaluser, adminuser;
grant select on release_type to entryuser, normaluser, adminuser;
grant select on descriptive_tag to entryuser, normaluser, adminuser;
grant select on tag_of_list to entryuser, normaluser, adminuser;
grant select on member_of to entryuser, normaluser, adminuser;
grant select on genre to entryuser, normaluser, adminuser;
grant select on music_release to entryuser, normaluser, adminuser;
grant select on artist_of_release to entryuser, normaluser, adminuser;
grant select on genre_of_release to entryuser, normaluser, adminuser;
grant select on release_in_list to entryuser, normaluser, adminuser;
grant select on tracks_in_release to entryuser, normaluser, adminuser;
grant select on rating to entryuser, normaluser, adminuser;
grant select on tag_of_release to entryuser, normaluser, adminuser;
grant select on track to entryuser, normaluser, adminuser;
grant select on artist to entryuser, normaluser, adminuser;
grant insert, delete on soundbase_users to adminuser;
grant insert on soundbase_users to entryuser;
grant insert, delete on descriptive_tag to adminuser;
grant insert, delete on release_in_list to adminuser;
grant insert, delete on rating to adminuser;
grant insert, delete on track to adminuser;
grant insert, delete on tracks_in_release to adminuser;
grant insert, delete on tag_of_release to adminuser;
grant insert, delete on artist to adminuser;
grant insert, delete on member_of to adminuser;
grant insert, delete on genre to adminuser;
grant insert, delete on release_type to adminuser
grant insert, delete on genre_of_release to adminuser;
grant insert, delete on artist_of_release to adminuser;
grant insert, delete on tag_of_list to normaluser, adminuser;
grant insert, delete on release_in_list to normaluser, adminuser;
grant insert, delete on release_list to normaluser, adminuser;



------------------------------PROCEDURES FOR SOUNDBASE_USERS------------------------------------------------------
CREATE OR REPLACE PROCEDURE ADD_USER (
    p_username VARCHAR2,
    p_password VARCHAR2
) AS
BEGIN
    INSERT INTO SOUNDBASE_USERS (USERNAME, SIGN_UP_DATE, PASSWORD, USER_TYPE)
    VALUES (p_username, CURRENT_DATE, p_password, 0);
END;

CREATE OR REPLACE PROCEDURE DELETE_USER (p_user_id INTEGER)
AS
BEGIN
  DELETE FROM SOUNDBASE_USERS
  WHERE USER_ID = p_user_id;
END;

CREATE OR REPLACE PROCEDURE EDIT_USER (p_user_id INTEGER, p_username VARCHAR2, p_password VARCHAR2)
AS
BEGIN
  UPDATE SOUNDBASE_USERS
  SET USERNAME = p_username, PASSWORD = p_password
  WHERE USER_ID = p_user_id;
END;

------------------------------PROCEDURES FOR ARTIST------------------------------------------------------
CREATE OR REPLACE PROCEDURE ADD_ARTIST (p_artist_name VARCHAR2, p_activity_start_date DATE, p_artist_description VARCHAR2)
AS
BEGIN
  INSERT INTO ARTIST (ARTIST_NAME, ACTIVITY_START_DATE, ARTIST_DESCRIPTION)
  VALUES (p_artist_name, p_activity_start_date, p_artist_description);
END;


CREATE OR REPLACE PROCEDURE EDIT_ARTIST (p_artist_id INTEGER, p_artist_name VARCHAR2, p_activity_start_date DATE, p_artist_description VARCHAR2)
AS
BEGIN
  UPDATE ARTIST
  SET ARTIST_NAME = p_artist_name, ACTIVITY_START_DATE = p_activity_start_date, ARTIST_DESCRIPTION = p_artist_description
  WHERE ARTIST_ID = p_artist_id;
END;


CREATE OR REPLACE PROCEDURE DELETE_ARTIST (p_artist_id INTEGER)
AS
BEGIN
  DELETE FROM ARTIST
  WHERE ARTIST_ID = p_artist_id;
END;

------------------------------PROCEDURES FOR TRACK------------------------------------------------------
CREATE OR REPLACE PROCEDURE ADD_TRACK (p_track_name IN VARCHAR2, p_track_length IN INTERVAL DAY TO SECOND)
AS
BEGIN
  INSERT INTO TRACK (TRACK_NAME, TRACK_LENGTH)
  VALUES (p_track_name, p_track_length);
END ADD_TRACK;

CREATE OR REPLACE PROCEDURE EDIT_TRACK (p_track_id IN INTEGER, p_track_name IN VARCHAR2, p_track_length IN INTERVAL DAY TO SECOND)
AS
BEGIN
  UPDATE TRACK
  SET TRACK_NAME = p_track_name, TRACK_LENGTH = p_track_length
  WHERE TRACK_ID = p_track_id;
END EDIT_TRACK;

CREATE OR REPLACE PROCEDURE DELETE_TRACK (p_track_id IN INTEGER)
AS
BEGIN
  DELETE FROM TRACK
  WHERE TRACK_ID = p_track_id;
END DELETE_TRACK;

------------------------------PROCEDURES FOR GENRE------------------------------------------------------
CREATE OR REPLACE PROCEDURE ADD_GENRE (p_genre_name IN VARCHAR2, p_genre_description IN VARCHAR2)
AS
BEGIN
  INSERT INTO GENRE (GENRE_NAME, GENRE_DESCRIPTION)
  VALUES (p_genre_name, p_genre_description);
END ADD_GENRE;

CREATE OR REPLACE PROCEDURE EDIT_GENRE (p_genre_id IN INTEGER, p_genre_name IN VARCHAR2, p_genre_description IN VARCHAR2)
AS
BEGIN
  UPDATE GENRE
  SET GENRE_NAME = p_genre_name, GENRE_DESCRIPTION = p_genre_description
  WHERE GENRE_ID = p_genre_id;
END EDIT_GENRE;

CREATE OR REPLACE PROCEDURE DELETE_GENRE (p_genre_id IN INTEGER)
AS
BEGIN
  DELETE FROM GENRE
  WHERE GENRE_ID = p_genre_id;
END DELETE_GENRE;

------------------------------PROCEDURES FOR MUSIC RELEASE------------------------------------------------------
CREATE OR REPLACE PROCEDURE ADD_MUSIC_RELEASE (p_release_name IN VARCHAR2, p_release_date IN DATE, p_release_type_id IN INTEGER)
AS
BEGIN
  INSERT INTO MUSIC_RELEASE (RELEASE_NAME, RELEASE_DATE, RELEASE_TYPE_ID)
  VALUES (p_release_name, p_release_date, p_release_type_id);
END ADD_MUSIC_RELEASE;

CREATE OR REPLACE PROCEDURE EDIT_MUSIC_RELEASE (p_release_id IN INTEGER, p_release_name IN VARCHAR2, p_release_date IN DATE, p_release_type_id IN INTEGER)
AS
BEGIN
  UPDATE MUSIC_RELEASE
  SET RELEASE_NAME = p_release_name, RELEASE_DATE = p_release_date, RELEASE_TYPE_ID = p_release_type_id
  WHERE RELEASE_ID = p_release_id;
END EDIT_MUSIC_RELEASE;

CREATE OR REPLACE PROCEDURE delete_music_release(p_release_id IN MUSIC_RELEASE.RELEASE_ID%TYPE)
AS
BEGIN

FOR i in (
    SELECT TRACK_ID 
    FROM TRACKS_IN_RELEASE
    WHERE RELEASE_ID = p_release_id
  )
  loop
     DELETE FROM TRACKS_IN_RELEASE WHERE TRACK_ID = i.TRACK_ID;
     DELETE From TRACK where track_id = i.TRACK_ID;
  end loop;

  DELETE FROM ARTIST_OF_RELEASE
  WHERE RELEASE_ID = p_release_id;

  DELETE FROM GENRE_OF_RELEASE
  WHERE RELEASE_ID = p_release_id;

  DELETE FROM MUSIC_RELEASE
  WHERE RELEASE_ID = p_release_id;
 
END delete_music_release;




------------------------------PROCEDURES FOR RATING------------------------------------------------------
CREATE OR REPLACE PROCEDURE ADD_RATING (
    p_star_value INTEGER,
    p_rating_date DATE,
    p_soundbase_user_id INTEGER,
    p_rated_release_id INTEGER,
    p_contents VARCHAR2
) AS 
BEGIN
    INSERT INTO RATING (STAR_VALUE, RATING_DATE, SOUNDBASE_USERS_ID, RATED_RELEASE_ID, CONTENTS)
    VALUES (p_star_value, p_rating_date, p_soundbase_user_id, p_rated_release_id, p_contents);
    
END ADD_RATING;

CREATE OR REPLACE PROCEDURE EDIT_RATING (
    p_rating_id INTEGER,
    p_star_value INTEGER,
    p_soundbase_user_id INTEGER,
    p_rated_release_id INTEGER,
    p_contents VARCHAR2
) AS 
BEGIN
    UPDATE RATING
    SET STAR_VALUE = p_star_value,
    SOUNDBASE_USER_ID = p_soundbase_user_id,
    RATED_RELEASE_ID = p_rated_release_id,
    CONTENTS = p_contents
    WHERE RATING_ID = p_rating_id;
END EDIT_RATING;

CREATE OR REPLACE PROCEDURE DELETE_RATING (
    p_rating_id INTEGER
) AS 
BEGIN
    DELETE FROM RATING
    WHERE RATING_ID = p_rating_id;
END DELETE_RATING;







alter session set "_ORACLE_SCRIPT"=true;
CREATE USER user_12345 identified by mypassword;
Grant create session to user_12345;
